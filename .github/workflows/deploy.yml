name: Deploy to VPS

on:
  workflow_dispatch:
    inputs:
      env:
        description: "GitHub Environment"
        required: true
        default: production
      branch:
        description: "Branch to deploy"
        required: true
        default: main
      publish_dir:
        description: "Frontend publish directory on server (default: /var/www/html)"
        required: false
        default: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Assert required secrets (presence only)
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set +u
          miss=0
          for k in SSH_HOST SSH_USER SSH_PRIVATE_KEY; do
            v="${!k-}"
            if [ -z "$v" ]; then
              echo "::error title=REQUIRED:$k::MISSING"
              miss=1
            else
              echo "::notice title=REQUIRED:$k::SET"
            fi
          done
          [ "$miss" -eq 0 ] || exit 1

      - name: Deploy over SSH (NVM-safe, temp-clone + rsync, domain-agnostic publish)
        uses: appleboy/ssh-action@v1.0.3
        env:
          # Optional if you didn't configure NOPASSWD sudoers
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          # Server-fixed locations (match your current manual process)
          BACKEND_DIR: /home/deploy/ExplorerToken/backend
          FRONTEND_DIR: /home/deploy/ExplorerToken/frontend
          REPO_URL: https://github.com/WickedBroX/Blockchain.git
          # Frontend publish directory (domain-agnostic). Default → /var/www/html
          PUBLISH_DIR: ${{ inputs.publish_dir }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 45m
          envs: SUDO_PASSWORD,BACKEND_DIR,FRONTEND_DIR,REPO_URL,PUBLISH_DIR
          script: |
            set -euo pipefail
            BRANCH="${{ inputs.branch }}"

            # ---------- sudo strategy ----------
            if [ -n "${SUDO_PASSWORD:-}" ]; then
              SUDO='sudo -S -p ""'
              echo "$SUDO_PASSWORD" | $SUDO -k true >/dev/null 2>&1 || { echo "ERROR: Invalid SUDO_PASSWORD or not permitted."; exit 1; }
              run_sudo() { echo "$SUDO_PASSWORD" | $SUDO "$@"; }
            else
              if ! sudo -n true >/dev/null 2>&1; then
                echo "ERROR: sudo requires a password but SUDO_PASSWORD is not set."
                echo "Provide SUDO_PASSWORD in Environment 'production' or grant NOPASSWD for deploy user."
                exit 1
              fi
              SUDO='sudo -n'
              run_sudo() { $SUDO "$@"; }
            fi

            # ---------- ensure dirs ----------
            mkdir -p "$BACKEND_DIR" "$FRONTEND_DIR"

            # ---------- NVM bootstrap (install Node if missing) ----------
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then . "$NVM_DIR/nvm.sh"; fi
            if ! command -v node >/dev/null 2>&1; then
              echo "Node not found; installing Node 22 via NVM..."
              [ -s "$NVM_DIR/nvm.sh" ] || { echo "ERROR: NVM not found at $NVM_DIR"; exit 1; }
              nvm install 22
            fi
            nvm use 22 >/dev/null 2>&1 || true
            node -v
            npm -v

            # ---------- fresh shallow clone then mirror ----------
            TMPDIR="$(mktemp -d)"
            git clone --depth 1 --branch "$BRANCH" "$REPO_URL" "$TMPDIR/repo"

            # backend -> mirror
            rsync -a --delete --exclude ".git" "$TMPDIR/repo/backend/" "$BACKEND_DIR/"

            # backend build
            cd "$BACKEND_DIR"
            npm ci
            npm run build

            # restart backend + verify health
            run_sudo /usr/bin/systemctl restart explorertoken-backend
            sleep 2
            curl -fsS http://127.0.0.1:4000/health || (journalctl -u explorertoken-backend -n 200 --no-pager; exit 1)

            # frontend -> mirror & build
            rsync -a --delete --exclude ".git" "$TMPDIR/repo/frontend/" "$FRONTEND_DIR/"
            cd "$FRONTEND_DIR"
            npm ci
            npm run build

            # ---------- publish frontend (domain-agnostic) ----------
            # If not provided, default to /var/www/html
            if [ -z "${PUBLISH_DIR:-}" ]; then
              PUBLISH_DIR="/var/www/html"
            fi
            echo "Publishing frontend dist → ${PUBLISH_DIR}"
            run_sudo mkdir -p "$PUBLISH_DIR"
            run_sudo /usr/bin/rsync -a --delete dist/ "$PUBLISH_DIR"/

            # If nginx exists, test and reload (do nothing if absent)
            if command -v nginx >/dev/null 2>&1; then
              if run_sudo /usr/sbin/nginx -t; then
                run_sudo /usr/bin/systemctl reload nginx || true
              fi
            fi

            # Save backend logs for artifact pickup (optional)
            journalctl -u explorertoken-backend -n 400 --no-pager > "$HOME/server-logs.txt" || true

      - name: Pull back server logs (artifact)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "server-logs.txt"
          target: "./"

      - name: Upload backend logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: server-logs.txt
