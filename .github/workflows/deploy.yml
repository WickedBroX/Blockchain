name: Deploy to VPS

on:
  workflow_dispatch:
    inputs:
      env:
        description: "GitHub Environment"
        required: true
        default: production
      branch:
        description: "Branch to deploy"
        required: true
        default: main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Assert environment bindings (presence only)
        shell: bash
        env:
          # REQUIRED
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          # OPTIONAL
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          WEB_ROOT: ${{ vars.WEB_ROOT }}
        run: |
          set +u
          missing_required=0
          check_required () { local k="$1"; local v="${!k-}"; [ -n "$v" ] && echo "::notice title=REQUIRED:$k::SET" || { echo "::error title=REQUIRED:$k::MISSING"; missing_required=1; }; }
          check_optional () { local k="$1"; local v="${!k-}"; [ -n "$v" ] && echo "::notice title=OPTIONAL:$k::SET" || echo "::notice title=OPTIONAL:$k::MISSING (ok)"; }

          echo "Asserting Environment: ${{ inputs.env }}"
          check_required SSH_HOST
          check_required SSH_USER
          check_required SSH_PRIVATE_KEY
          check_optional SSH_PORT
          check_optional SUDO_PASSWORD
          check_optional WEB_ROOT

          [ "$missing_required" -eq 0 ] || { echo "Missing required secrets"; exit 1; }

      - name: Deploy over SSH (build on VPS, NVM-safe)
        uses: appleboy/ssh-action@v1.0.3
        env:
          # Optional (only if you didn't configure NOPASSWD sudoers)
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          # Optional: environment var for web root
          WEB_ROOT: ${{ vars.WEB_ROOT }}
          # IMPORTANT: forward these to the remote shell
          BACKEND_DIR: /home/deploy/ExplorerToken/backend
          FRONTEND_DIR: /home/deploy/ExplorerToken/frontend
          REPO_URL: https://github.com/WickedBroX/Blockchain.git
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT != '' && secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          envs: SUDO_PASSWORD,WEB_ROOT,BACKEND_DIR,FRONTEND_DIR,REPO_URL
          script: |
            set -euo pipefail

            BRANCH="${{ inputs.branch }}"

            # Choose sudo strategy
            if [ -n "${SUDO_PASSWORD:-}" ]; then
              SUDO='echo "$SUDO_PASSWORD" | sudo -S'
            else
              SUDO='sudo'
            fi

            # Ensure dirs
            mkdir -p "$BACKEND_DIR" "$FRONTEND_DIR"

            # --- NVM bootstrap (non-interactive shell) ---
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            export PATH="$HOME/.nvm/versions/node/v22.21.0/bin:$PATH"
            node -v
            npm -v

            # --- Backend ---
            cd "$BACKEND_DIR"
            if [ ! -d .git ]; then
              git init
              git remote add origin "$REPO_URL"
            fi
            CUR=$(git remote get-url origin || true)
            if [ "$CUR" != "$REPO_URL" ]; then
              git remote set-url origin "$REPO_URL"
            fi
            git fetch --prune origin
            git checkout -B "$BRANCH" "origin/$BRANCH"

            echo "Installing backend deps..."
            npm ci
            echo "Building backend..."
            npm run build

            echo "Restarting backend service..."
            $SUDO /usr/bin/systemctl restart explorertoken-backend
            sleep 2
            echo "Backend health:"
            curl -fsS http://127.0.0.1:4000/health || (journalctl -u explorertoken-backend -n 200 --no-pager; exit 1)

            # --- Frontend ---
            cd "$FRONTEND_DIR"
            if [ ! -d .git ]; then
              git init
              git remote add origin "$REPO_URL"
            fi
            CUR=$(git remote get-url origin || true)
            if [ "$CUR" != "$REPO_URL" ]; then
              git remote set-url origin "$REPO_URL"
            fi
            git fetch --prune origin
            git checkout -B "$BRANCH" "origin/$BRANCH"

            echo "Installing frontend deps..."
            npm ci
            echo "Building frontend..."
            npm run build

            # Detect web root or fallback
            if [ -z "${WEB_ROOT:-}" ]; then
              CAND=$(grep -Rsl "server_name\\s\\+haswork\\.dev" /etc/nginx/sites-enabled /etc/nginx/sites-available 2>/dev/null | head -n1 || true)
              if [ -n "$CAND" ]; then
                WEB_ROOT=$(awk '/\\sroot\\s/{print $2}' "$CAND" | tr -d ';' | tail -n1)
              fi
              WEB_ROOT=${WEB_ROOT:-/var/www/haswork.dev}
            fi
            echo "WEB_ROOT => $WEB_ROOT"

            echo "Syncing frontend dist â†’ WEB_ROOT"
            $SUDO /usr/bin/rsync -a --delete dist/ "$WEB_ROOT"/

            echo "Testing Nginx config..."
            $SUDO /usr/sbin/nginx -t
            echo "Reloading Nginx..."
            $SUDO /usr/bin/systemctl reload nginx

            # Save backend logs for artifact
            journalctl -u explorertoken-backend -n 400 --no-pager > "$HOME/server-logs.txt" || true

      - name: Pull back server logs (artifact)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT != '' && secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "server-logs.txt"
          target: "./"

      - name: Upload backend logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: server-logs.txt
