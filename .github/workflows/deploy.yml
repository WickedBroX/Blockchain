name: Deploy to VPS
on:
  workflow_dispatch:
    inputs:
      env:
        description: "GitHub Environment"
        required: true
        default: production
      branch:
        description: "Branch to deploy"
        required: true
        default: main

env:
  REPO_URL: https://github.com/WickedBroX/Blockchain.git
  BACKEND_DIR: /home/deploy/ExplorerToken/backend
  FRONTEND_DIR: /home/deploy/ExplorerToken/frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Assert required secrets
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          test -n "${SSH_HOST}" || (echo "Missing SSH_HOST" && exit 1)
          test -n "${SSH_USER}" || (echo "Missing SSH_USER" && exit 1)
          test -n "${SSH_PRIVATE_KEY}" || (echo "Missing SSH_PRIVATE_KEY" && exit 1)
          echo "Secrets OK"

      - name: Deploy over SSH (build on VPS, NVM-safe)
        uses: appleboy/ssh-action@v1.0.3
        env:
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
          WEB_ROOT: ${{ vars.WEB_ROOT }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT != '' && secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          envs: SUDO_PASSWORD,WEB_ROOT
          script: |
            set -euo pipefail

            BRANCH="${{ inputs.branch }}"

            # Choose sudo mode
            if [ -n "${SUDO_PASSWORD:-}" ]; then
              SUDO='echo "$SUDO_PASSWORD" | sudo -S'
            else
              SUDO='sudo'
            fi

            # Ensure dirs
            mkdir -p "$BACKEND_DIR" "$FRONTEND_DIR"

            # NVM bootstrap
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            export PATH="$HOME/.nvm/versions/node/v22.21.0/bin:$PATH"
            echo "node: $(command -v node || true)"
            node -v || (echo "Node is required via NVM"; exit 1)
            npm -v

            # --- Backend ---
            cd "$BACKEND_DIR"
            if [ -d .git ]; then
              git remote -v || true
              git fetch --prune origin || git remote add origin "$REPO_URL"
            else
              git init
              git remote add origin "$REPO_URL"
            fi
            git fetch --prune origin
            git checkout -B "$BRANCH" "origin/$BRANCH"
            echo "Installing backend deps..."
            npm ci
            echo "Building backend..."
            npm run build

            echo "Restarting backend service..."
            $SUDO /usr/bin/systemctl restart explorertoken-backend
            sleep 2
            echo "Backend health:"
            curl -fsS http://127.0.0.1:4000/health || (journalctl -u explorertoken-backend -n 200 --no-pager; exit 1)

            # --- Frontend ---
            cd "$FRONTEND_DIR"
            if [ -d .git ]; then
              git fetch --prune origin || git remote add origin "$REPO_URL"
            else
              git init
              git remote add origin "$REPO_URL"
            fi
            git fetch --prune origin
            git checkout -B "$BRANCH" "origin/$BRANCH"

            echo "Installing frontend deps..."
            npm ci
            echo "Building frontend..."
            npm run build

            # Detect Nginx web root for haswork.dev, fallback to /var/www/haswork.dev
            if [ -z "${WEB_ROOT:-}" ]; then
              CAND=$(grep -Rsl "server_name\\s\\+haswork\\.dev" /etc/nginx/sites-enabled /etc/nginx/sites-available 2>/dev/null | head -n1 || true)
              if [ -n "$CAND" ]; then
                WEB_ROOT=$(awk '/root\\s+/{print $2}' "$CAND" | tr -d ';' | tail -n1)
              fi
              WEB_ROOT=${WEB_ROOT:-/var/www/haswork.dev}
            fi
            echo "WEB_ROOT => $WEB_ROOT"

            echo "Syncing frontend dist â†’ WEB_ROOT"
            $SUDO /usr/bin/rsync -a --delete dist/ "$WEB_ROOT"/

            echo "Testing Nginx config..."
            $SUDO /usr/sbin/nginx -t
            echo "Reloading Nginx..."
            $SUDO /usr/bin/systemctl reload nginx

            # Save backend logs to home for pickup
            journalctl -u explorertoken-backend -n 400 --no-pager > "$HOME/server-logs.txt" || true

      - name: Pull back server logs (artifact)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT != '' && secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "server-logs.txt"
          target: "./"

      - name: Upload backend logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: server-logs.txt
