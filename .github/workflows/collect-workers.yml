name: Collect Worker Logs

on:
  workflow_dispatch:
    inputs:
      env:
        description: "GitHub Environment"
        required: true
        default: production
      lines:
        description: "Lines per unit"
        required: true
        default: "400"

jobs:
  collect:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Assert required secrets (presence only)
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set +u
          miss=0
          for k in SSH_HOST SSH_USER SSH_PRIVATE_KEY; do
            v="${!k-}"
            if [ -z "$v" ]; then
              echo "::error title=REQUIRED:$k::MISSING"
              miss=1
            else
              echo "::notice title=REQUIRED:$k::SET"
            fi
          done
          [ "$miss" -eq 0 ] || exit 1

      - name: SSH: print worker logs inline (no artifact)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 15m
          script: |
            set -euo pipefail
            LINES="${{ inputs.lines }}"
            echo "===== Worker Units ====="
            systemctl list-units 'explorertoken-chain@*.service' --no-legend --no-pager || true

            if systemctl list-units 'explorertoken-chain@*.service' --no-legend --no-pager | awk '{print $1}' | grep -q .; then
              systemctl list-units 'explorertoken-chain@*.service' --no-legend --no-pager \
                | awk '{print $1}' | sed 's/.service$//' \
                | while read -r unit; do
                    echo "===== $unit (last $LINES lines) ====="
                    journalctl -u "$unit" -n "$LINES" --no-pager || true
                  done
            else
              echo "No worker services found."
            fi
